/*
 * This file is generated by jOOQ.
*/
package com.makhnov.springbootcalculator.jooq.tables;


import com.makhnov.springbootcalculator.jooq.Indexes;
import com.makhnov.springbootcalculator.jooq.Keys;
import com.makhnov.springbootcalculator.jooq.tables.records.PostfixResultsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostfixResults extends TableImpl<PostfixResultsRecord> {

    private static final long serialVersionUID = -1462711704;

    /**
     * The reference instance of <code>postfix_results.postfix_results</code>
     */
    public static final PostfixResults POSTFIX_RESULTS_ = new PostfixResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostfixResultsRecord> getRecordType() {
        return PostfixResultsRecord.class;
    }

    /**
     * The column <code>postfix_results.postfix_results.id</code>.
     */
    public final TableField<PostfixResultsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>postfix_results.postfix_results.postfix_expression</code>.
     */
    public final TableField<PostfixResultsRecord, String> POSTFIX_EXPRESSION = createField("postfix_expression", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>postfix_results.postfix_results.result</code>.
     */
    public final TableField<PostfixResultsRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>postfix_results.postfix_results</code> table reference
     */
    public PostfixResults() {
        this(DSL.name("postfix_results"), null);
    }

    /**
     * Create an aliased <code>postfix_results.postfix_results</code> table reference
     */
    public PostfixResults(String alias) {
        this(DSL.name(alias), POSTFIX_RESULTS_);
    }

    /**
     * Create an aliased <code>postfix_results.postfix_results</code> table reference
     */
    public PostfixResults(Name alias) {
        this(alias, POSTFIX_RESULTS_);
    }

    private PostfixResults(Name alias, Table<PostfixResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostfixResults(Name alias, Table<PostfixResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return com.makhnov.springbootcalculator.jooq.PostfixResults.POSTFIX_RESULTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POSTFIX_RESULTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PostfixResultsRecord, Long> getIdentity() {
        return Keys.IDENTITY_POSTFIX_RESULTS_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PostfixResultsRecord> getPrimaryKey() {
        return Keys.KEY_POSTFIX_RESULTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PostfixResultsRecord>> getKeys() {
        return Arrays.<UniqueKey<PostfixResultsRecord>>asList(Keys.KEY_POSTFIX_RESULTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostfixResults as(String alias) {
        return new PostfixResults(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostfixResults as(Name alias) {
        return new PostfixResults(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostfixResults rename(String name) {
        return new PostfixResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostfixResults rename(Name name) {
        return new PostfixResults(name, null);
    }
}
